`timescale 1ns / 1ps

module Project1Test();
    //Input Registers of ALUSystem
    reg[2:0] RF_O1Sel; 
    reg[2:0] RF_O2Sel; 
    reg[1:0] RF_FunSel;
    reg[3:0] RF_RSel;
    reg[3:0] RF_TSel;
    reg[3:0] ALU_FunSel;
    reg[1:0] ARF_OutASel; 
    reg[1:0] ARF_OutBSel; 
    reg[1:0] ARF_FunSel;
    reg[3:0] ARF_RSel;
    reg      IR_LH;
    reg      IR_Enable;
    reg[1:0]      IR_Funsel;
    reg      Mem_WR;
    reg      Mem_CS;
    reg[1:0] MuxASel;
    reg[1:0] MuxBSel;
    reg MuxCSel;
    reg      Clock;
    
    //Test Bench Connection of ALU System
    ALUSystem _ALUSystem(
    .RF_OutASel(RF_O1Sel), 
    .RF_OutBSel(RF_O2Sel), 
    .RF_FunSel(RF_FunSel),
    .RF_RSel(RF_RSel),
    .RF_TSel(RF_TSel),
    .ALU_FunSel(ALU_FunSel),
    .ARF_OutCSel(ARF_OutASel), 
    .ARF_OutDSel(ARF_OutBSel), 
    .ARF_FunSel(ARF_FunSel),
    .ARF_RegSel(ARF_RSel),
    .IR_LH(IR_LH),
    .IR_Enable(IR_Enable),
    .IR_Funsel(IR_Funsel),
    .Mem_WR(Mem_WR),
    .Mem_CS(Mem_CS),
    .MuxASel(MuxASel),
    .MuxBSel(MuxBSel),
    .MuxCSel(MuxCSel),
    .Clock(Clock)
    );
    
    //Test Vector Variables
    reg [41:0] VectorNum, Errors, TotalLine; 
    reg [41:0] TestVectors[3:0];
    reg Reset, Operation;
    initial begin
        Reset = 0;
    end
    //Clock Signal Generation
    always 
    begin
        Clock = 1; #5; Clock = 0; #5; // 10ns period
    end
    
    //Read Test Bench Values
    initial begin
        $readmemb("TestBench.mem", TestVectors); // Read vectors
        VectorNum = 0; Errors = 0; TotalLine=0; Reset=0;// Initialize
    end
    
    // Apply test vectors on rising edge of clock
    always @(posedge Clock)
    begin
        #1; 
        {Operation, RF_O1Sel, RF_O2Sel, RF_FunSel, 
        RF_RSel, RF_TSel, ALU_FunSel, ARF_OutASel, ARF_OutBSel, 
        ARF_FunSel, ARF_RSel, IR_LH, IR_Enable, IR_Funsel, 
        Mem_WR, Mem_CS, MuxASel, MuxBSel, MuxCSel} = TestVectors[VectorNum];
    end
    
    // Check results on falling edge of clk
    always @(negedge Clock)
        if (~Reset) // skip during reset
        begin
            $display("Input Values:");
            $display("Operation: %d", Operation);
            $display("Register File: O1Sel: %d, O2Sel: %d, FunSel: %d, RSel: %d, TSel: %d", RF_O1Sel, RF_O2Sel, RF_FunSel, RF_RSel, RF_TSel);            
            $display("ALU FunSel: %d", ALU_FunSel);
            $display("Addres Register File: OutASel: %d, OutBSel: %d, FunSel: %d, Regsel: %d", ARF_OutASel, ARF_OutBSel, ARF_FunSel, ARF_RSel);            
            $display("Instruction Register: LH: %d, Enable: %d, FunSel: %d", IR_LH, IR_Enable, IR_Funsel);            
            $display("Memory: WR: %d, CS: %d", Mem_WR, Mem_CS);
            $display("MuxASel: %d, MuxBSel: %d, MuxCSel: %d", MuxASel, MuxBSel, MuxCSel);
            
            $display("");
            $display("Output Values:");
            $display("Register File: AOut: %d, BOut: %d", _ALUSystem.AOut, _ALUSystem.BOut);            
            $display("ALUOut: %d, ALUOutFlag: %d, ALUOutFlags: Z:%d, C:%d, N:%d, O:%d,", _ALUSystem.ALUOut, _ALUSystem.ALUOutFlag, _ALUSystem.ALUOutFlag[3],_ALUSystem.ALUOutFlag[2],_ALUSystem.ALUOutFlag[1],_ALUSystem.ALUOutFlag[0]);
            $display("Address Register File: AOut: %d, BOut (Address): %d", _ALUSystem.AOut, _ALUSystem.Address);            
            $display("Memory Out: %d", _ALUSystem.MemoryOut);            
            $display("Instruction Register: IROut: %d", _ALUSystem.IROut);            
            $display("MuxAOut: %d, MuxBOut: %d, MuxCOut: %d", _ALUSystem.MuxAOut, _ALUSystem.MuxBOut, _ALUSystem.MuxCOut);
            
            // increment array index and read next testvector
            VectorNum = VectorNum + 1;
            if (TestVectors[VectorNum] === 42'bx)
            begin
                $display("%d tests completed.",
                VectorNum);
                $finish; // End simulation
            end
        end
endmodule
module regN_tbb;

    // Inputs
    reg clk;
    reg [1:0] FunSel;
    reg [7:0] I;
    reg E;
    
    // Outputs
    wire [7:0] Q;
    
    // Instantiate the Unit Under Test (UUT)
    regN #(8) uut (
        .clk(clk), 
        .FunSel(FunSel), 
        .I(I), 
        .E(E), 
        .Q(Q)
    );

    initial begin
        // Initialize Inputs
        clk = 0;
        FunSel = 0;
        I = 8'h00;
        E = 0;
        
        // Wait 10ns for asynchronous reset to complete
        #10 E = 1;
        
        // Set FunSel = 01, I = 8'h55 and E = 1
        #10 FunSel = 2'b01;
        I = 8'h55;
        #10 E = 0;
        #10 E = 1;
        
        // Set FunSel = 10 and E = 1
        #10 FunSel = 2'b10;
        #10 E = 0;
        #10 E = 1;
        
        // Set FunSel = 11 and E = 1
        #10 FunSel = 2'b11;
        #10 E = 0;
        #10 E = 1;
        
        // Finish simulation
        #10 $finish;
    end
    
    always #5 clk = ~clk;

endmodule

module IR_tbb;

     // Inputs
    reg clk; 
    reg [1:0] FunSel;
    reg [7:0] I;
    reg E;
    reg LH;
    
    // Outputs
    wire [15:0] IROut;
    
    // Instantiate the Unit Under Test (UUT)
    IR16bit  uut(
        .clk(clk), 
        .I(I),
        .LH(LH),
        .E(E), 
        .FunSel(FunSel), 
        .IROut(IROut)
    );

    
    initial begin
        // Initialize Inputs
        clk = 0;
        FunSel = 00;
        I = 8'h1;
        E = 0;
        LH = 0;
        
       
        #10 FunSel = 2'b00;
        I = 8'h21; 
        #10 FunSel = 2'b01; 
        #10 E = 0; 
        #10 E = 1;
  
        #10 FunSel = 2'b00;
        
        #10 LH = 1;
        #10 FunSel = 2'b01;
       
        #10 FunSel = 2'b10;  
        
        
        #10 FunSel = 2'b11; 
        
        // Finish simulation
        #10 $finish;
    end
    
    always #10 clk = ~clk;

endmodule

module ALU_testbench;
    reg  clk;
    reg [7:0] A;
    reg [7:0] B;
    reg [3:0] FunSel;
    reg Cin;
    wire[7:0] outALU;
    wire[3:0] flagOUT; //flag register Z, C, N, O
    
    ALU alu(A, B, FunSel, Cin, outALU, flagOUT);
    
    initial begin
        // Initialize Inputs
        A = 8'b00000000;
        B = 8'b00000000;
        FunSel = 4'b0000;
        clk = 1'b0;
        Cin = 1'b0;
        
        
        #10 A = 8'b10001010; B = 8'b10000001; FunSel = 4'b0000; // A
        #10 A = 8'b10101110; B = 8'b10010001; FunSel = 4'b0001; // B
        #10 A = 8'b10101110; B = 8'b10010001; FunSel = 4'b0010; // NOT A
        #10 A = 8'b01010101; B = 8'b1010101;  FunSel = 4'b0011; // NOT B
        #10 A = 8'b01010101; B = 8'b10010011; FunSel = 4'b0100; // A+B
        #10 A = 8'b10100110; B = 8'b11100000; FunSel = 4'b0101; // A-B
        #10 A = 8'b11110111; B = 8'b11000111; FunSel = 4'b0110; // Compare A,B
        #10 A = 8'b10000011; B = 8'b10001101; FunSel = 4'b0111; // A AND B
        #10 A = 8'b00000001; B = 8'b11000011; FunSel = 4'B1000; // A OR B
        #10 A = 8'b10100110; B = 8'b11100000; FunSel = 4'b1001; // A NAND B
        #10 A = 8'b00110000; B = 8'b00000000; FunSel = 4'b1010; // A XOR B
        #10 A = 8'b11110111; B = 8'b11000111; FunSel = 4'b1011; // LSL A
        #10 A = 8'b00110000; B = 8'b00000000; FunSel = 4'b1100; // LSR A
        #10 A = 8'b10001010; B = 8'b10000001; FunSel = 4'b1101; // ASL A
        #10 A = 8'b10000011; B = 8'b10001101; FunSel = 4'b1110; // ASR A
        #10 A = 8'b00000001; B = 8'b11000011; FunSel = 4'b1111; // CSR A  
        
        
         // Finish simulation
         #10 $finish;
    end
    always #5 clk = ~clk;
endmodule

module testbench;

    reg clk;
    reg [7:0]I;
    reg [2:0]O1Sel;
    reg [2:0]O2Sel;
    reg [1:0]FunSel;
    reg [3:0]RSel;
    reg [3:0]TSel;
    wire [7:0]O1;
    wire [7:0]O2;

    RegisterFile dut(clk, I, O1Sel, O2Sel, FunSel, RSel, TSel, O1, O2);

    initial begin
        clk = 0;
        I = 8'h00;
        O1Sel = 3'b000;
        O2Sel = 3'b000;
        FunSel = 2'b00;
        RSel = 4'b0000;
        TSel = 4'b0000;

        #10 I = 8'h55; RSel = 4'b0001;
        #10 I = 8'hAA; RSel = 4'b0010;
        #10 I = 8'hF0; RSel = 4'b0011;
        #10 I = 8'h0F; RSel = 4'b0100;
        #10 O1Sel = 3'b100; O2Sel = 3'b100;
        #10 FunSel = 2'b01; RSel = 4'b1010;
        #10 I = 8'h3A; TSel = 4'b1100;
        #10 FunSel = 2'b01; I = 8'hA5; TSel = 4'b0110;
        #10 I = 8'h08; TSel = 4'b1000;
        #10 RSel = 4'b1010; FunSel = 2'b11;
        #20 O1Sel = 3'b101;
        #20 O1Sel = 3'b100;
        #20 $stop;
    end

    always #5 clk = ~clk;

endmodule
